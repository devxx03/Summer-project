// Source code is decompiled from a .class file using FernFlower decompiler.
import java.util.ArrayList;

public class Nonogram {
   private boolean[][] pixelData;
   private int[][] rowClues;
   private int[][] colClues;

   public Nonogram(boolean[][] var1) {
      this.pixelData = var1;
      this.generateClues();
   }

   private void generateClues() {
      int var1 = this.pixelData.length;
      int var2 = this.pixelData[0].length;
      this.rowClues = new int[var1][];
      this.colClues = new int[var2][];

      int var3;
      for(var3 = 0; var3 < var1; ++var3) {
         this.rowClues[var3] = this.getClues(this.pixelData[var3]);
      }

      for(var3 = 0; var3 < var2; ++var3) {
         boolean[] var4 = new boolean[var1];

         for(int var5 = 0; var5 < var1; ++var5) {
            var4[var5] = this.pixelData[var5][var3];
         }

         this.colClues[var3] = this.getClues(var4);
      }

   }

   private int[] getClues(boolean[] var1) {
      ArrayList var2 = new ArrayList();
      int var3 = 0;
      boolean[] var4 = var1;
      int var5 = var1.length;

      for(int var6 = 0; var6 < var5; ++var6) {
         boolean var7 = var4[var6];
         if (var7) {
            ++var3;
         } else if (var3 > 0) {
            var2.add(var3);
            var3 = 0;
         }
      }

      if (var3 > 0) {
         var2.add(var3);
      }

      if (var2.isEmpty()) {
         var2.add(0);
      }

      return var2.stream().mapToInt((var0) -> {
         return var0;
      }).toArray();
   }

   public int[][] getRowClues() {
      return this.rowClues;
   }

   public int[][] getColClues() {
      return this.colClues;
   }

   public boolean[][] getPixelData() {
      return this.pixelData;
   }
}
